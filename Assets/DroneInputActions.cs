//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/DroneInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DroneInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DroneInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DroneInputActions"",
    ""maps"": [
        {
            ""name"": ""Drone"",
            ""id"": ""8e0b778d-effc-4153-929f-e406b144e8f7"",
            ""actions"": [
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""1704cdd6-8fc3-4029-9c3a-a6ba96f34a5c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""bcaa6465-9fa7-40ef-9742-f8dfdf624809"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""ed6bdb8d-f267-4543-808d-1a7cd185a195"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Power"",
                    ""type"": ""Value"",
                    ""id"": ""1bad1b9f-ae86-4deb-9c2c-0df643c517d6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Hovering"",
                    ""type"": ""Button"",
                    ""id"": ""3f4f76df-cffa-4189-9084-4a3aaccaf520"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""073a868c-b04f-417a-a37b-2b03973db442"",
                    ""path"": ""<HID::KHOBBY KHOBBY>/ry"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e445384e-248f-4696-8bb7-5b6e4ffbc3be"",
                    ""path"": ""<HID::FeiYing Model GOLD WARRIOR SIM -  G4~7 Controller>/ry"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b0de8ab-76d9-473a-8781-02662f54b03d"",
                    ""path"": ""<HID::KHOBBY KHOBBY>/stick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18189154-1996-48d6-9869-71d6c433a78d"",
                    ""path"": ""<HID::FeiYing Model GOLD WARRIOR SIM -  G4~7 Controller>/stick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""333624b9-f6db-460b-9139-134b5a4dbc68"",
                    ""path"": ""<HID::KHOBBY KHOBBY>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40eb77fa-c4ec-4a8a-b27d-a0b54192c11d"",
                    ""path"": ""<HID::FeiYing Model GOLD WARRIOR SIM -  G4~7 Controller>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cffab0a0-3435-4f2b-8f39-3887585ef98a"",
                    ""path"": ""<HID::KHOBBY KHOBBY>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Power"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef18bb3b-b845-4959-b61d-e2079c77aa00"",
                    ""path"": ""<HID::FeiYing Model GOLD WARRIOR SIM -  G4~7 Controller>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Power"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec691dfe-d2fa-40e1-a24e-2f4ff0b4fe70"",
                    ""path"": ""<HID::KHOBBY KHOBBY>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hovering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Drone
        m_Drone = asset.FindActionMap("Drone", throwIfNotFound: true);
        m_Drone_Yaw = m_Drone.FindAction("Yaw", throwIfNotFound: true);
        m_Drone_Pitch = m_Drone.FindAction("Pitch", throwIfNotFound: true);
        m_Drone_Roll = m_Drone.FindAction("Roll", throwIfNotFound: true);
        m_Drone_Power = m_Drone.FindAction("Power", throwIfNotFound: true);
        m_Drone_Hovering = m_Drone.FindAction("Hovering", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Drone
    private readonly InputActionMap m_Drone;
    private IDroneActions m_DroneActionsCallbackInterface;
    private readonly InputAction m_Drone_Yaw;
    private readonly InputAction m_Drone_Pitch;
    private readonly InputAction m_Drone_Roll;
    private readonly InputAction m_Drone_Power;
    private readonly InputAction m_Drone_Hovering;
    public struct DroneActions
    {
        private @DroneInputActions m_Wrapper;
        public DroneActions(@DroneInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Yaw => m_Wrapper.m_Drone_Yaw;
        public InputAction @Pitch => m_Wrapper.m_Drone_Pitch;
        public InputAction @Roll => m_Wrapper.m_Drone_Roll;
        public InputAction @Power => m_Wrapper.m_Drone_Power;
        public InputAction @Hovering => m_Wrapper.m_Drone_Hovering;
        public InputActionMap Get() { return m_Wrapper.m_Drone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneActions set) { return set.Get(); }
        public void SetCallbacks(IDroneActions instance)
        {
            if (m_Wrapper.m_DroneActionsCallbackInterface != null)
            {
                @Yaw.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnYaw;
                @Yaw.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnYaw;
                @Yaw.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnYaw;
                @Pitch.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnPitch;
                @Pitch.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnPitch;
                @Pitch.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnPitch;
                @Roll.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnRoll;
                @Power.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnPower;
                @Power.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnPower;
                @Power.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnPower;
                @Hovering.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnHovering;
                @Hovering.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnHovering;
                @Hovering.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnHovering;
            }
            m_Wrapper.m_DroneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Yaw.started += instance.OnYaw;
                @Yaw.performed += instance.OnYaw;
                @Yaw.canceled += instance.OnYaw;
                @Pitch.started += instance.OnPitch;
                @Pitch.performed += instance.OnPitch;
                @Pitch.canceled += instance.OnPitch;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Power.started += instance.OnPower;
                @Power.performed += instance.OnPower;
                @Power.canceled += instance.OnPower;
                @Hovering.started += instance.OnHovering;
                @Hovering.performed += instance.OnHovering;
                @Hovering.canceled += instance.OnHovering;
            }
        }
    }
    public DroneActions @Drone => new DroneActions(this);
    public interface IDroneActions
    {
        void OnYaw(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnPower(InputAction.CallbackContext context);
        void OnHovering(InputAction.CallbackContext context);
    }
}
